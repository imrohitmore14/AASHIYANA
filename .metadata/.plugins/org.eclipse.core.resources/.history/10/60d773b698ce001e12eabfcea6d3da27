package com.aashiyana.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.aashiyana.dao.HotelDao;
import com.aashiyana.dao.RoomDao;
import com.aashiyana.entity.Hotel;
import com.aashiyana.entity.Room;
import com.aashiyana.exception.HotelServiceException;

@Service
@Transactional
public class RoomService {
    @Autowired
    private RoomDao roomDao;

    @Autowired
    private HotelDao hotelDao;

    public int register(Room room) {
        int count = roomDao.findIfRoomExists(room.getRoomId());
        if (count == 1)
            throw new HotelServiceException("Room already registered!");
        else {
            roomDao.save(room);
            return room.getRoomId();
        }
    }

    public Room fetchByRoomId(int id) {
        Optional<Room> room = roomDao.findById(id);
        if (room.isPresent())
            return room.get();
        else
            throw new HotelServiceException("Room with id " + id + " does not exist!");
    }

    public List<Room> getAllRoomsByHotelId(long hotelId) {
        return roomDao.findByHotelHotelId(hotelId);
    }

    public void deleteRoom(int id) {
        Optional<Room> room = roomDao.findByRoomId(id);

        if (room.isPresent()) {
            roomDao.delete(room.get());
        } else {
            throw new HotelServiceException("Room with id " + id + " does not exist!");
        }
    }

    public List<String> getRoomTypesByHotelId(long hotelId) {
        Optional<Hotel> hotel = hotelDao.findById(hotelId);
        if (hotel.isPresent()) {
            return roomDao.findRoomTypesByHotel(hotel.get());
        } else {
            throw new HotelServiceException("Hotel with id " + hotelId + " does not exist!");
        }
    }

    public double getRoomPriceByTypeAndHotelId(String typeOfRoom, long hotelId) {
        Optional<Hotel> hotel = hotelDao.findById(hotelId);
        if (hotel.isPresent()) {
            return roomDao.findRoomPriceByTypeAndHotel(typeOfRoom, hotel.get());
        } else {
            throw new HotelServiceException("Hotel with id " + hotelId + " does not exist!");
        }
    }
}
